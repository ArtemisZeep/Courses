import { PrismaClient } from '@prisma/client'
import bcryptjs from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
  const adminPassword = await bcryptjs.hash('admin123', 12)
  const admin = await prisma.user.upsert({
    where: { email: 'admin@example.com' },
    update: {},
    create: {
      email: 'admin@example.com',
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      password: adminPassword,
      isAdmin: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const studentPassword = await bcryptjs.hash('student123', 12)
  const student = await prisma.user.upsert({
    where: { email: 'student@example.com' },
    update: {},
    create: {
      email: 'student@example.com',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç',
      password: studentPassword,
      isAdmin: false,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏
  const module1 = await prisma.module.upsert({
    where: { order: 1 },
    update: { isActive: true },
    create: {
      title: '–û—Å–Ω–æ–≤—ã Excel',
      description: '–ò–∑—É—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Å Excel: —è—á–µ–π–∫–∏, —Ñ–æ—Ä–º—É–ª—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      order: 1,
      isActive: true,
    },
  })

  const module2 = await prisma.module.upsert({
    where: { order: 2 },
    update: { isActive: true },
    create: {
      title: '–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏',
      description: '–ò–º–ø–æ—Ä—Ç, —ç–∫—Å–ø–æ—Ä—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel',
      order: 2,
      isActive: true,
    },
  })

  const module3 = await prisma.module.upsert({
    where: { order: 3 },
    update: { isActive: true },
    create: {
      title: '–§–æ—Ä–º—É–ª—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
      order: 3,
      isActive: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
  const lesson1 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ Excel',
      contentHtml: '<h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Excel!</h2><p>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.</p><ul><li>–ß—Ç–æ —Ç–∞–∫–æ–µ Excel</li><li>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã</li><li>–û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</li></ul>',
      order: 1,
      moduleId: module1.id,
    },
  })

  const lesson2 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–†–∞–±–æ—Ç–∞ —Å —è—á–µ–π–∫–∞–º–∏',
      contentHtml: '<h2>–†–∞–±–æ—Ç–∞ —Å —è—á–µ–π–∫–∞–º–∏</h2><p>–ù–∞—É—á–∏—Ç–µ—Å—å –≤—ã–¥–µ–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫–∏.</p><p><strong>–í–∞–∂–Ω–æ:</strong> –Ø—á–µ–π–∫–∏ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ Excel.</p>',
      order: 2,
      moduleId: module1.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–æ–¥—É–ª—è
  const lesson3 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module2.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
      contentHtml: '<h2>–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel</h2><p>–ù–∞—É—á–∏—Ç–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</p><ul><li>–ò–º–ø–æ—Ä—Ç –∏–∑ CSV</li><li>–ò–º–ø–æ—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li><li>–ò–º–ø–æ—Ä—Ç –∏–∑ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü</li></ul>',
      order: 1,
      moduleId: module2.id,
    },
  })

  const lesson4 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module2.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
      contentHtml: '<h2>–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</h2><p>–ò–∑—É—á–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel.</p><p><strong>–¢–µ–º—ã:</strong> –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, —Å–≤–æ–¥–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã</p>',
      order: 2,
      moduleId: module2.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –º–æ–¥—É–ª—è
  const lesson5 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module3.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã',
      contentHtml: '<h2>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã Excel</h2><p>–ò–∑—É—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã.</p><ul><li>–°–£–ú–ú()</li><li>–°–†–ó–ù–ê–ß()</li><li>–ï–°–õ–ò()</li><li>–°–ß–Å–¢()</li></ul>',
      order: 1,
      moduleId: module3.id,
    },
  })

  const lesson6 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module3.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
      contentHtml: '<h2>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Excel</h2><p>–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.</p><p><strong>–§—É–Ω–∫—Ü–∏–∏:</strong> –í–ü–†(), –ò–ù–î–ï–ö–°(), –ü–û–ò–°–ö–ü–û–ó(), –°–£–ú–ú–ï–°–õ–ò()</p>',
      order: 2,
      moduleId: module3.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
  const question1 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ Excel?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      type: 'single',
      order: 1,
      moduleId: module1.id,
      isFinal: true,
    },
  })

  const question2 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–ì–¥–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ —Ñ–æ—Ä–º—É–ª—ã?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      type: 'single',
      order: 2,
      moduleId: module1.id,
      isFinal: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –º–æ–¥—É–ª—è
  const question3 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module2.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
      type: 'multiple',
      order: 1,
      moduleId: module2.id,
      isFinal: true,
    },
  })

  const question4 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module2.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤ Excel?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      type: 'single',
      order: 2,
      moduleId: module2.id,
      isFinal: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –º–æ–¥—É–ª—è
  const question5 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module3.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–ö–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é',
      type: 'single',
      order: 1,
      moduleId: module3.id,
      isFinal: true,
    },
  })

  const question6 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module3.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
      type: 'multiple',
      order: 2,
      moduleId: module3.id,
      isFinal: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–ö–Ω–∏–≥–∞',
      isCorrect: false,
      order: 1,
      questionId: question1.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–õ–∏—Å—Ç',
      isCorrect: false,
      order: 2,
      questionId: question1.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–Ø—á–µ–π–∫–∞',
      isCorrect: true,
      order: 3,
      questionId: question1.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: '–õ–µ–Ω—Ç–∞',
      isCorrect: false,
      order: 4,
      questionId: question1.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–í —Å—Ç—Ä–æ–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
      isCorrect: false,
      order: 1,
      questionId: question2.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–í –ø–æ–ª–µ –∏–º–µ–Ω–∏',
      isCorrect: false,
      order: 2,
      questionId: question2.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–í —Å–∞–º–æ–π —è—á–µ–π–∫–µ',
      isCorrect: false,
      order: 3,
      questionId: question2.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: '–í —Å—Ç—Ä–æ–∫–µ —Ñ–æ—Ä–º—É–ª',
      isCorrect: true,
      order: 4,
      questionId: question2.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question3.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: 'CSV',
      isCorrect: true,
      order: 1,
      questionId: question3.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question3.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: 'TXT',
      isCorrect: true,
      order: 2,
      questionId: question3.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question3.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: 'XML',
      isCorrect: true,
      order: 3,
      questionId: question3.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question3.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: 'MP3',
      isCorrect: false,
      order: 4,
      questionId: question3.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question4.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–¢–∞–±–ª–∏—Ü–∞ —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
      isCorrect: true,
      order: 1,
      questionId: question4.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question4.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–ì—Ä–∞—Ñ–∏–∫',
      isCorrect: false,
      order: 2,
      questionId: question4.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question4.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–î–∏–∞–≥—Ä–∞–º–º–∞',
      isCorrect: false,
      order: 3,
      questionId: question4.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question4.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: '–§–æ—Ä–º—É–ª–∞',
      isCorrect: false,
      order: 4,
      questionId: question4.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question5.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–°–£–ú–ú()',
      isCorrect: false,
      order: 1,
      questionId: question5.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question5.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–í–ü–†()',
      isCorrect: true,
      order: 2,
      questionId: question5.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question5.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–ï–°–õ–ò()',
      isCorrect: false,
      order: 3,
      questionId: question5.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question5.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: '–°–†–ó–ù–ê–ß()',
      isCorrect: false,
      order: 4,
      questionId: question5.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —à–µ—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question6.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–õ–ï–í–°–ò–ú–í()',
      isCorrect: true,
      order: 1,
      questionId: question6.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question6.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–ü–†–ê–í–°–ò–ú–í()',
      isCorrect: true,
      order: 2,
      questionId: question6.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question6.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–°–¶–ï–ü–ò–¢–¨()',
      isCorrect: true,
      order: 3,
      questionId: question6.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question6.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: '–°–£–ú–ú()',
      isCorrect: false,
      order: 4,
      questionId: question6.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª–µ–π
  const assignment1 = await prisma.assignment.upsert({
    where: { 
      id: 'assignment1'
    },
    update: {},
    create: {
      id: 'assignment1',
      title: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã',
      description: '<h3>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –≤ Excel</h3><p>–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö, –≤–∫–ª—é—á–∞—é—â—É—é:</p><ul><li>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</li><li>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</li><li>–¶–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</li><li>–û–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å</li></ul><p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</p>',
      moduleId: module1.id,
    },
  })

  const assignment2 = await prisma.assignment.upsert({
    where: { 
      id: 'assignment2'
    },
    update: {},
    create: {
      id: 'assignment2',
      title: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
      description: '<h3>–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel</h3><p>–°–∫–∞—á–∞–π—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ Excel. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</p><ul><li>–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ CSV —Ñ–∞–π–ª</li><li>–û—á–∏—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</li><li>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É</li><li>–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫</li></ul>',
      moduleId: module2.id,
    },
  })

  const assignment3 = await prisma.assignment.upsert({
    where: { 
      id: 'assignment3'
    },
    update: {},
    create: {
      id: 'assignment3',
      title: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã',
      description: '<h3>–°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã</h3><p>–ò—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è:</p><ul><li>–†–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—Å–ª–æ–≤–∏–µ–º</li><li>–ü–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –í–ü–†()</li><li>–û–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞</li><li>–°–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü</li></ul>',
      moduleId: module3.id,
    },
  })

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
  console.log(`üë§ –ê–¥–º–∏–Ω: admin@example.com / admin123`)
  console.log(`üë§ –°—Ç—É–¥–µ–Ω—Ç: student@example.com / student123`)
  console.log(`üìö –°–æ–∑–¥–∞–Ω–æ –º–æ–¥—É–ª–µ–π: 3`)
  console.log(`üìñ –°–æ–∑–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: 6`)
  console.log(`‚ùì –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 6`)
  console.log(`üìù –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: 3`)
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })