import { PrismaClient } from '@prisma/client'
import bcryptjs from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
  const adminPassword = await bcryptjs.hash('admin123', 12)
  const admin = await prisma.user.upsert({
    where: { email: 'admin@example.com' },
    update: {},
    create: {
      email: 'admin@example.com',
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      password: adminPassword,
      isAdmin: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const studentPassword = await bcryptjs.hash('student123', 12)
  const student = await prisma.user.upsert({
    where: { email: 'student@example.com' },
    update: {},
    create: {
      email: 'student@example.com',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç',
      password: studentPassword,
      isAdmin: false,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏
  const module1 = await prisma.module.upsert({
    where: { order: 1 },
    update: { isActive: true },
    create: {
      title: '–û—Å–Ω–æ–≤—ã Excel',
      description: '–ò–∑—É—á–∏—Ç–µ –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Å Excel: —è—á–µ–π–∫–∏, —Ñ–æ—Ä–º—É–ª—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      order: 1,
      isActive: true,
    },
  })

  const module2 = await prisma.module.upsert({
    where: { order: 2 },
    update: { isActive: true },
    create: {
      title: '–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏',
      description: '–ò–º–ø–æ—Ä—Ç, —ç–∫—Å–ø–æ—Ä—Ç –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel',
      order: 2,
      isActive: true,
    },
  })

  const module3 = await prisma.module.upsert({
    where: { order: 3 },
    update: { isActive: true },
    create: {
      title: '–§–æ—Ä–º—É–ª—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π',
      order: 3,
      isActive: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
  const lesson1 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ Excel',
      contentHtml: '<h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Excel!</h2><p>–í —ç—Ç–æ–º —É—Ä–æ–∫–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.</p><ul><li>–ß—Ç–æ —Ç–∞–∫–æ–µ Excel</li><li>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã</li><li>–û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã</li></ul>',
      order: 1,
      moduleId: module1.id,
    },
  })

  const lesson2 = await prisma.lesson.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–†–∞–±–æ—Ç–∞ —Å —è—á–µ–π–∫–∞–º–∏',
      contentHtml: '<h2>–†–∞–±–æ—Ç–∞ —Å —è—á–µ–π–∫–∞–º–∏</h2><p>–ù–∞—É—á–∏—Ç–µ—Å—å –≤—ã–¥–µ–ª—è—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫–∏.</p><p><strong>–í–∞–∂–Ω–æ:</strong> –Ø—á–µ–π–∫–∏ - —ç—Ç–æ –æ—Å–Ω–æ–≤–∞ –ª—é–±–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ Excel.</p>',
      order: 2,
      moduleId: module1.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
  const question1 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 1
      }
    },
    update: {},
    create: {
      title: '–ß—Ç–æ —Ç–∞–∫–æ–µ Excel?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ',
      type: 'single',
      order: 1,
      moduleId: module1.id,
      isFinal: true,
    },
  })

  const question2 = await prisma.question.upsert({
    where: { 
      moduleId_order: {
        moduleId: module1.id,
        order: 2
      }
    },
    update: {},
    create: {
      title: '–ö–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Excel –≤—ã –∑–Ω–∞–µ—Ç–µ?',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã',
      type: 'multiple',
      order: 2,
      moduleId: module1.id,
      isFinal: true,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º',
      isCorrect: false,
      order: 1,
      questionId: question1.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏',
      isCorrect: true,
      order: 2,
      questionId: question1.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question1.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
      isCorrect: false,
      order: 3,
      questionId: question1.id,
    },
  })

  // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 1
      }
    },
    update: {},
    create: {
      text: '–õ–µ–Ω—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤',
      isCorrect: true,
      order: 1,
      questionId: question2.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 2
      }
    },
    update: {},
    create: {
      text: '–ü–∞–Ω–µ–ª—å —Ñ–æ—Ä–º—É–ª',
      isCorrect: true,
      order: 2,
      questionId: question2.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 3
      }
    },
    update: {},
    create: {
      text: '–õ–∏—Å—Ç —Å —è—á–µ–π–∫–∞–º–∏',
      isCorrect: true,
      order: 3,
      questionId: question2.id,
    },
  })

  await prisma.answerOption.upsert({
    where: { 
      questionId_order: {
        questionId: question2.id,
        order: 4
      }
    },
    update: {},
    create: {
      text: '–ë–ª–æ–∫–Ω–æ—Ç',
      isCorrect: false,
      order: 4,
      questionId: question2.id,
    },
  })

  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!')
  console.log(`üë§ –ê–¥–º–∏–Ω: admin@example.com / admin123`)
  console.log(`üë§ –°—Ç—É–¥–µ–Ω—Ç: student@example.com / student123`)
  console.log(`üìö –°–æ–∑–¥–∞–Ω–æ –º–æ–¥—É–ª–µ–π: 3`)
  console.log(`üìñ –°–æ–∑–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: 2`)
  console.log(`‚ùì –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: 2`)
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })