'use client'

import { useSession } from 'next-auth/react'
import { useEffect, useState } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import styles from './page.module.css'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'

interface ModuleProgress {
  moduleId: string
  status: 'locked' | 'available' | 'passed'
  lessonsRead: string[]
  quiz: {
    attempts: any[]
    bestScorePercent?: number
    passedAt?: string
  }
  assignment: {
    submitted: boolean
    submittedAt?: string
    status?: string
    grade?: number // –û—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 5 –±–∞–ª–ª–æ–≤
    feedback?: string
    gradedAt?: string
  }
  assignments?: {
    total: number
    completed: number
    details: Array<{
      id: string
      submitted: boolean
      grade?: number
    }>
  }
}

interface Module {
  id: string
  title: string
  description: string
  order: number
  _count: {
    lessons: number
    questions: number
  }
  progress: ModuleProgress
}

interface LeaderboardUser {
  id: string
  name: string
  email: string
  rating: number
  createdAt: string
}

export default function DashboardPage() {
  const { data: session, status } = useSession()
  const [modules, setModules] = useState<Module[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [leaderboard, setLeaderboard] = useState<LeaderboardUser[]>([])
  const [showAllUsers, setShowAllUsers] = useState(false)
  const [loadingLeaderboard, setLoadingLeaderboard] = useState(false)

  useEffect(() => {
    if (status === 'authenticated') {
      fetchModules()
      fetchLeaderboard(5) // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-5
    }
  }, [status])

  const fetchModules = async () => {
    try {
      const response = await fetch('/api/modules/visible')
      const data = await response.json()

      if (response.ok) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        setModules(data.modules || data.allModules || [])
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π')
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π')
    } finally {
      setLoading(false)
    }
  }

  const fetchLeaderboard = async (limit: number = 5) => {
    try {
      setLoadingLeaderboard(true)
      const response = await fetch(`/api/leaderboard?limit=${limit}`)
      const data = await response.json()

      if (response.ok) {
        setLeaderboard(data.users || [])
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', data.error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error)
    } finally {
      setLoadingLeaderboard(false)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'locked':
        return <Badge variant="secondary">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</Badge>
      case 'available':
        return <Badge variant="outline">üìñ –î–æ—Å—Ç—É–ø–µ–Ω</Badge>
      case 'passed':
        return <Badge className="bg-green-100 text-green-800">‚úÖ –ü—Ä–æ–π–¥–µ–Ω</Badge>
      default:
        return <Badge variant="secondary">–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</Badge>
    }
  }

  const getProgressPercentage = (progress: ModuleProgress, totalLessons: number) => {
    if (progress.status === 'passed') return 100
    if (progress.quiz.bestScorePercent !== undefined) {
      return progress.quiz.bestScorePercent
    }
    // –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
    return (progress.lessonsRead.length / Math.max(totalLessons, 1)) * 30 // 30% –∑–∞ —É—Ä–æ–∫–∏
  }

  if (status === 'loading' || loading) {
    return (
      <div className={styles.centerScreen}>
        <div className={styles.textCenter}>
          <div className={styles.spinnerLg}></div>
          <p className={styles.muted}>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }

  if (!session) {
    return null // Middleware should redirect
  }

  return (
    <div className={styles.page}>
      {/* Header */}
      <header className={styles.header}>
        <div className={styles.container}>
          <div className={styles.headerBar}>
            <div>
              <h1 className={styles.title}>
                –ü—Ä–∏–≤–µ—Ç, {session.user.name}! üëã
              </h1>
              <p className={styles.subTitle}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å Excel</p>
            </div>
            <div className={styles.actions}>
              {session.user.isAdmin && (
                <Link href="/admin">
                  <Button variant="outline">–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</Button>
                </Link>
              )}
              <Button
                variant="outline"
                onClick={() => {
                  console.log('[Dashboard] Logout clicked. Navigating to /auth/signout')
                  window.location.href = '/auth/signout'
                }}
              >
                –í—ã—Ö–æ–¥
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className={styles.main}>
        {error && (
          <div className={styles.alertError}>
            <p className={styles.alertErrorText}>{error}</p>
          </div>
        )}

        {/* Progress Overview */}
        <div className={styles.section}>
          <h2 className={styles.sectionTitle}>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h2>
          <div className={styles.grid3}>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π</CardTitle>
                <Badge variant="outline">{modules.length}</Badge>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{modules.length}</div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–ü—Ä–æ–π–¥–µ–Ω–æ</CardTitle>
                <Badge className="bg-green-100 text-green-800">
                  {modules.filter(m => m.progress.status === 'passed').length}
                </Badge>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {modules.filter(m => m.progress.status === 'passed').length}
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">–î–æ—Å—Ç—É–ø–Ω–æ</CardTitle>
                <Badge variant="outline">
                  {modules.filter(m => m.progress.status === 'available').length}
                </Badge>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {modules.filter(m => m.progress.status === 'available').length}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Modules Grid */}
        <div className={styles.section}>
          <h2 className={styles.sectionTitle}>–ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {modules.map((module) => (
              <Card key={module.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex justify-between items-start">
                    <CardTitle className="text-lg">{module.title}</CardTitle>
                    {getStatusBadge(module.progress.status)}
                  </div>
                  <CardDescription>{module.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {/* Progress Bar */}
                    <div>
                      <div className={styles.progressBarLabel}>
                        <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                        <span>{Math.round(getProgressPercentage(module.progress, module._count.lessons))}%</span>
                      </div>
                      <Progress 
                        value={getProgressPercentage(module.progress, module._count.lessons)} 
                        className={styles.progressBarSm}
                      />
                    </div>

                    {/* Module Stats */}
                    <div className={styles.stats}>
                      <div>üìö –£—Ä–æ–∫–æ–≤: {module._count.lessons}</div>
                      <div>üß™ –í–æ–ø—Ä–æ—Å–æ–≤: {module._count.questions}</div>
                      <div>üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {module.progress.lessonsRead.length}/{module._count.lessons}</div>
                      {module.progress.assignments && (
                        <div>üìù –ó–∞–¥–∞–Ω–∏–π: {module.progress.assignments.completed}/{module.progress.assignments.total}</div>
                      )}
                      {module.progress.quiz.bestScorePercent !== undefined && (
                        <div>üìä –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {module.progress.quiz.bestScorePercent}%</div>
                      )}
                      {(module.progress.assignment.submitted || (module.progress.assignments && module.progress.assignments.completed > 0)) && (
                        <div className={styles.dividerTop}>
                          <div className="font-medium text-gray-700">üìù –ó–∞–¥–∞–Ω–∏—è:</div>
                          {module.progress.assignments ? (
                            <div className="space-y-1">
                              <div className="text-green-600">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {module.progress.assignments.completed}/{module.progress.assignments.total}</div>
                              {module.progress.assignments.details.map(assignment => 
                                assignment.grade !== null && assignment.grade !== undefined && (
                                  <div key={assignment.id} className="flex items-center gap-1">
                                    <span>–û—Ü–µ–Ω–∫–∞:</span>
                                    <Badge 
                                      variant={assignment.grade >= 3 ? 'default' : 'destructive'}
                                     className={styles.badgeXs}
                                    >
                                      {assignment.grade}/5 –±–∞–ª–ª–æ–≤
                                    </Badge>
                                  </div>
                                )
                              )}
                            </div>
                          ) : module.progress.assignment.submitted && (
                            <div>
                              <div className="text-green-600">‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
                              {module.progress.assignment.grade !== null && module.progress.assignment.grade !== undefined && (
                                <div className="flex items-center gap-1 mt-1">
                                  <span>–û—Ü–µ–Ω–∫–∞:</span>
                                  <Badge 
                                    variant={module.progress.assignment.grade >= 3 ? 'default' : 'destructive'}
                                     className={styles.badgeXs}
                                  >
                                    {module.progress.assignment.grade}/5 –±–∞–ª–ª–æ–≤
                                  </Badge>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      )}
                    </div>

                    {/* Action Buttons */}
                    <div className="flex flex-col space-y-2">
                      {module.progress.status === 'locked' ? (
                        <Button disabled className={styles.btnFull}>
                          üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        </Button>
                      ) : (
                        <>
                          <Link href={`/modules/${module.id}`}>
                            <Button className={styles.btnFull}>
                              {module.progress.status === 'passed' ? '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' : '–ò–∑—É—á–∞—Ç—å'}
                            </Button>
                          </Link>
                          {module.progress.quiz.attempts.length > 0 && (
                            <Link href={`/modules/${module.id}/attempts`}>
                              <Button variant="outline" className={styles.btnFull}>
                                –†–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫
                              </Button>
                            </Link>
                          )}
                        </>
                      )}
                    </div>

                    {/* Assignment Status */}
                    {module.progress.assignment.submitted && (
                      <div className="text-sm p-2 bg-blue-50 border border-blue-200 rounded">
                        üìé –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                        {module.progress.assignment.grade !== null && module.progress.assignment.grade !== undefined && (
                          <div className="font-semibold">–û—Ü–µ–Ω–∫–∞: {module.progress.assignment.grade}/5 –±–∞–ª–ª–æ–≤</div>
                        )}
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>

        {/* Leaderboard Section */}
        <div className={styles.section}>
          <div className={styles.leadersHeader}>
            <div className={styles.leadersLeft}>
              <div className={styles.trophyCircle}>
                <span className={styles.trophyEmoji}>üèÜ</span>
              </div>
              <div>
                <h2 className={styles.leadersTitle}>–†–µ–π—Ç–∏–Ω–≥ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h2>
                <p className={styles.leadersSub}>–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –±–∞–ª–ª–∞–º</p>
              </div>
            </div>
            <Button
              variant="outline"
              onClick={() => {
                if (showAllUsers) {
                  fetchLeaderboard(5)
                  setShowAllUsers(false)
                } else {
                  fetchLeaderboard(50)
                  setShowAllUsers(true)
                }
              }}
              disabled={loadingLeaderboard}
              className={styles.btnPad}
            >
              {loadingLeaderboard ? (
                <div className={styles.spinnerMd}></div>
              ) : null}
              {showAllUsers ? '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-5' : '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö'}
            </Button>
          </div>
          
          <Card className={styles.leadersCard}>
            <CardContent className={styles.leadersCardPad}>
              {loadingLeaderboard ? (
                <div className={styles.leadersLoading}>
                  <div className={styles.spinnerMd}></div>
                  <span className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞...</span>
                </div>
              ) : leaderboard.length > 0 ? (
                <div className={styles.leadersList}>
                  {leaderboard.map((user, index) => {
                    const isTop3 = index < 3;
                    const getMedalColor = (position: number) => {
                      switch (position) {
                        case 0: return styles.gold;
                        case 1: return styles.silver;
                        case 2: return styles.bronze;
                        default: return styles.medalDefault;
                      }
                    };
                    
                    const getMedalIcon = (position: number) => {
                      switch (position) {
                        case 0: return 'ü•á';
                        case 1: return 'ü•à';
                        case 2: return 'ü•â';
                        default: return '';
                      }
                    };

                    const getBorderColor = (position: number) => {
                      switch (position) {
                        case 0: return styles.borderGold;
                        case 1: return styles.borderSilver;
                        case 2: return styles.borderBronze;
                        default: return '';
                      }
                    };

                    const getBgColor = (position: number) => {
                      switch (position) {
                        case 0: return styles.bgGold;
                        case 1: return styles.bgSilver;
                        case 2: return styles.bgBronze;
                        default: return styles.bgDefault;
                      }
                    };

                    return (
                      <div key={user.id} className={`${styles.leaderRow} ${getBgColor(index)} ${getBorderColor(index)}`}>
                        <div className={styles.leaderLeft}>
                          <div className={`${styles.leaderMedal} ${getMedalColor(index)}`}>
                            {isTop3 ? (
                              <span className={styles.medalIcon}>
                                {getMedalIcon(index)}
                              </span>
                            ) : null}
                            {index + 1}
                          </div>
                          <div>
                            <div className={styles.leaderName}>{user.name}</div>
                            <div className={styles.leaderEmail}>{user.email}</div>
                          </div>
                        </div>
                        <div className={styles.leaderRight}>
                          <div className={isTop3 ? styles.scoreTop : styles.scoreDefault}>
                            {user.rating}
                          </div>
                          <div className={styles.scoreNote}>–±–∞–ª–ª–æ–≤</div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              ) : (
                <div className="text-center py-8 text-gray-500">
                  –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Tips Section */}
        <Card>
          <CardHeader>
            <CardTitle>üí° –°–æ–≤–µ—Ç—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm text-gray-600">
              <li>‚Ä¢ –í—Å–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞</li>
              <li>‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑</li>
              <li>‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è</li>
              <li>‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ "–†–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫" –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã</li>
            </ul>
          </CardContent>
        </Card>
      </main>
    </div>
  )
}